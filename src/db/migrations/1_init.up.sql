BEGIN;


CREATE TABLE users (
  id UUID PRIMARY KEY,
  username VARCHAR(255) NOT NULL,
  password VARCHAR(255) NOT NULL,
  email VARCHAR(255) NOT NULL,
  created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP NOT NULL
);


CREATE TABLE IF NOT EXISTS user_connections (
user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
connected_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
connected_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP NOT NULL,
PRIMARY KEY (user_id, connected_id)
);


CREATE TABLE IF NOT EXISTS user_connection_requests (
sender_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
receiver_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
sent_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP NOT NULL,
PRIMARY KEY (sender_id, receiver_id)
);

CREATE TYPE frequency AS ENUM ('daily', 'weekly', 'monthly');

CREATE TABLE IF NOT EXISTS tasks (
  id BIGSERIAL PRIMARY KEY,
  user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,


  task TEXT NOT NULL,
  description TEXT NOT NULL DEFAULT '',
  done BOOLEAN NOT NULL DEFAULT FALSE,
  due_date TIMESTAMPTZ,
  repeat_frequency frequency,
  created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP NOT NULL
);

CREATE TABLE IF NOT EXISTS groups (
  id UUID PRIMARY KEY,
  name VARCHAR(255) NOT NULL,
  description TEXT NOT NULL DEFAULT '',
  created_at TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP
);

CREATE TYPE event AS ENUM ('add', 'remove', 'promote', 'demote', 'rename', 'change_description');

CREATE TABLE IF NOT EXISTS group_events (
  group_id UUID NOT NULL REFERENCES groups(id) ON DELETE CASCADE,
  event event NOT NULL,
  admin_id UUID REFERENCES users(id) ON DELETE SET NULL,
  member_id UUID REFERENCES users(id) ON DELETE SET NULL,
  change TEXT,
  created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP NOT NULL
);

CREATE TABLE IF NOT EXISTS group_users (
  group_id UUID NOT NULL REFERENCES groups(id) ON DELETE CASCADE,
  user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
  is_admin BOOLEAN NOT NULL DEFAULT FALSE,
  joined_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP NOT NULL,
  PRIMARY KEY (group_id, user_id)
);

CREATE TABLE IF NOT EXISTS group_tasks (
  id BIGSERIAL PRIMARY KEY,
  group_id UUID NOT NULL REFERENCES groups(id) ON DELETE CASCADE,

  task TEXT NOT NULL,
  description TEXT NOT NULL DEFAULT '',

  done BOOLEAN NOT NULL DEFAULT FALSE,
  comment TEXT NOT NULL DEFAULT '',
  done_by_id UUID REFERENCES users(id) ON DELETE SET NULL,
  done_at TIMESTAMPTZ,

  updated_by_id UUID REFERENCES users(id) ON DELETE SET NULL,
  updated_at TIMESTAMPTZ,
  
  created_by_id UUID REFERENCES users(id) ON DELETE SET NULL,
  created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP NOT NULL
);


CREATE TABLE IF NOT EXISTS lists (
  id UUID PRIMARY KEY,
  user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,

  name VARCHAR(255) NOT NULL,
  description TEXT NOT NULL DEFAULT '',
  task_count SMALLINT NOT NULL,
  done BOOLEAN NOT NULL DEFAULT FALSE,  

  sent_by_id UUID REFERENCES users(id) ON DELETE SET NULL,
  sent_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP NOT NULL
);

CREATE TABLE IF NOT EXISTS list_tasks (
  id BIGSERIAL PRIMARY KEY,
  list_id UUID NOT NULL REFERENCES lists(id) ON DELETE CASCADE,

  task TEXT NOT NULL,
  description TEXT NOT NULL DEFAULT '',
  done BOOLEAN NOT NULL DEFAULT FALSE
);


CREATE TABLE IF NOT EXISTS sent_lists (
  id UUID PRIMARY KEY,
  user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,

  name VARCHAR(255) NOT NULL,
  description TEXT NOT NULL DEFAULT '',
  task_count SMALLINT NOT NULL,

  sent_to_id UUID REFERENCES users(id) ON DELETE SET NULL,
  sent_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP NOT NULL
);

CREATE TABLE IF NOT EXISTS sent_list_tasks (
  id BIGSERIAL PRIMARY KEY,
  sent_list_id UUID NOT NULL REFERENCES sent_lists(id) ON DELETE CASCADE,

  task TEXT NOT NULL,
  description TEXT NOT NULL DEFAULT ''
);

COMMIT;